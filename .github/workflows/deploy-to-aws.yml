name: Deploy to Amazon ECS - Production

on:
  push:
    branches: [ deploy ]
  pull_request:
    branches: [ deploy ]

env:
  ECS_TASK_DEFINITION: .aws/learning-platform-nginx-task-definition.json
  CONTAINER_NAME: learning-platform-nginx

jobs:
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read # This is required for actions/checkout@v2
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v2
        with: 
          node-version: "18.12.0"

      - name: Check npm version
        run: npm -v
      - name: Check node version
        run: node -v

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm install --legacy-peer-deps
      
      - name: Generate version.json
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)  # Generate version based on timestamp
          echo "{\"version\": \"$VERSION\"}" > public/version.json
          echo "version.json generated with version: $VERSION"
        
      - name: Export
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::111547225120:role/ExampleGithubRole
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
          # IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build \
            --build-arg API_HOST=learning-platform-api.lerning-platform.namespace:3000 \
            --build-arg BUCKET_NAME=learning-platform-media-items.s3.eu-west-2.amazonaws.com \
            --build-arg SERVER_NAME=*.smartlms.co.uk \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f docker/nginx/Dockerfile .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a

        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.10
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.AWS_ECS_SERVICE }}
          cluster: ${{ secrets.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true