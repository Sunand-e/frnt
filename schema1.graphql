schema {
  query: Query
  mutation: Mutation
}
"Autogenerated return type of AddUsersToGroups"
type AddUsersToGroupsPayload {
  groups: [Group!]!
  users: [User!]!
}
"Autogenerated return type of AssignCapabilityToRole"
type AssignCapabilityToRolePayload {
  message: String!
}
"Autogenerated return type of AssignCoursesToGroups"
type AssignCoursesToGroupsPayload {
  courses: [ContentItem!]!
  groups: [Group!]!
}
"Autogenerated return type of AssignRoleToUser"
type AssignRoleToUserPayload {
  message: String!
}
"Autogenerated return type of AssignTaUser"
type AssignTaUserPayload {
  user: User!
}
type BulkImport {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
  uploadedBy: User
  users: [User!]
}
type Capability {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  roles: [Role!]
  tenantId: Tenant
  updatedAt: ISO8601DateTime!
}
input CapabilityInput {
  name: String!
}
input CertificateInput {
  data: JSON!
}
type CertificateTemplate {
  contentItems: [ContentItem!]
  createdAt: ISO8601DateTime!
  data: JSON
  id: ID!
  tenant: Tenant!
  updatedAt: ISO8601DateTime!
}
type ContentItem {
  certificateProperties: JSON
  certificateTemplate: CertificateTemplate
  children: [ContentItem!]
  content: JSON
  contentType: String
  courses: [ContentItem!]
  createdAt: ISO8601DateTime!
  groupsAssigned: [Group!]
  groupsEnrolled: [Group!]
  icon: Icon
  id: ID!
  image: MediaItem
  itemType: String!
  lessons: [ContentItem!]
  libraryItems: [ContentItem!]
  order: Int
  parents: [ContentItem!]
  pathways: [ContentItem!]
  prerequisites: JSON
  questions: [Question!]
  quizs: [ContentItem!]
  sections: [ContentItem!]
  settings: JSON
  tags: [Tag!]
  title: String
  updatedAt: ISO8601DateTime!
  users("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): ContentUserConnection
}
input ContentItemInput {
  id: ID
  title: String
  contentType: String
  iconId: ID
  "{ parentIds: ['1','2','3'..] }"
  parentIds: JSON
  "{ childrenIds: ['1','2','3'..] }"
  childrenIds: JSON
  certificateTemplateId: ID
  settings: JSON
  prerequisites: JSON
  certificateProperties: JSON
  order: Int
  imageId: ID
  content: JSON
  "{ sections: [{title: 'section1', ..}..] }"
  sections: JSON
  "scormId: 'aaa-sas-121'"
  scormId: ID
}
"The connection type for User."
type ContentUserConnection {
  "A list of edges."
  edges: [ContentUserEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type ContentUserEdge {
  completed: Boolean
  createdAt: ISO8601DateTime!
  "A cursor for use in pagination."
  cursor: String!
  firstVisited: ISO8601DateTime
  lastVisited: ISO8601DateTime
  "The item at the end of the edge."
  node: User
  score: Int
  status: String
  updatedAt: ISO8601DateTime!
  visits: Int
}
"Autogenerated return type of CreateCapability"
type CreateCapabilityPayload {
  capability: Capability
  message: String!
}
"Autogenerated return type of CreateCertificateTemplate"
type CreateCertificateTemplatePayload {
  certificateTemplate: CertificateTemplate!
  message: String!
}
"Autogenerated return type of CreateCourse"
type CreateCoursePayload {
  course: ContentItem
  ""
  message: JSON!
}
"Autogenerated return type of CreateEvent"
type CreateEventPayload {
  event: Event!
}
"Autogenerated return type of CreateGroup"
type CreateGroupPayload {
  group: Group!
}
"Autogenerated return type of CreateLesson"
type CreateLessonPayload {
  lesson: ContentItem
  ""
  message: JSON!
}
"Autogenerated return type of CreateLibraryItem"
type CreateLibraryItemPayload {
  libraryItem: ContentItem
  ""
  message: JSON!
}
"Autogenerated return type of CreatePathway"
type CreatePathwayPayload {
  ""
  message: JSON!
  pathway: ContentItem
}
"Autogenerated return type of CreatePhysicalEvent"
type CreatePhysicalEventPayload {
  event: PhysicalEvent!
}
"Autogenerated return type of CreateQuestion"
type CreateQuestionPayload {
  question: Question!
}
"Autogenerated return type of CreateQuiz"
type CreateQuizPayload {
  ""
  message: JSON!
  quiz: ContentItem
}
"Autogenerated return type of CreateRole"
type CreateRolePayload {
  message: String!
  role: Role
}
"Autogenerated return type of CreateSection"
type CreateSectionPayload {
  ""
  message: JSON!
  section: ContentItem
}
"Autogenerated return type of CreateTag"
type CreateTagPayload {
  tag: Tag!
}
"Autogenerated return type of CreateVirtualEvent"
type CreateVirtualEventPayload {
  event: VirtualEvent!
}
"Autogenerated return type of DeleteCertificateTemplate"
type DeleteCertificateTemplatePayload {
  certificateTemplate: CertificateTemplate!
  message: String!
}
"Autogenerated return type of DeleteContentItem"
type DeleteContentItemPayload {
  contentItem: ContentItem!
  message: String!
}
"Autogenerated return type of DeleteEvent"
type DeleteEventPayload {
  event: Event!
  message: String!
}
"Autogenerated return type of DeleteGroup"
type DeleteGroupPayload {
  group: Group!
  message: String!
}
"Autogenerated return type of DeleteMediaItem"
type DeleteMediaItemPayload {
  mediaItem: MediaItem
  message: String!
  usage: Boolean!
  usageReport: JSON!
}
"Autogenerated return type of DeletePhysicalEvent"
type DeletePhysicalEventPayload {
  event: PhysicalEvent!
  message: String!
}
"Autogenerated return type of DeleteQuestion"
type DeleteQuestionPayload {
  message: String!
}
"Autogenerated return type of DeleteScormModule"
type DeleteScormModulePayload {
  message: String!
}
"Autogenerated return type of DeleteTag"
type DeleteTagPayload {
  message: String!
  tag: Tag!
}
"Autogenerated return type of DeleteUser"
type DeleteUserPayload {
  user: User!
}
"Autogenerated return type of DeleteUserScoAttempt"
type DeleteUserScoAttemptPayload {
  message: String!
}
"Autogenerated return type of DeleteVirtualEvent"
type DeleteVirtualEventPayload {
  event: VirtualEvent!
  message: String!
}
"Autogenerated return type of EnrolGroupsInCourses"
type EnrolGroupsInCoursesPayload {
  courses: [ContentItem!]!
  groups: [Group!]!
}
"Autogenerated return type of EnrolUsersInCourses"
type EnrolUsersInCoursesPayload {
  status: String!
}
input EnrollContentItemInput {
  contentItemId: ID!
  groupId: ID
  userId: ID
  "group / user"
  enrollModel: String
  removeModel: String
  roleIds: JSON
}
input EnrollGroupContentItemInput {
  contentItemIds: JSON!
  groupIds: JSON!
}
input EnrollUserContentItemInput {
  contentItemIds: JSON!
  userIds: JSON!
  roleIds: JSON
}
type Event {
  content: JSON
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  duration: ISO8601DateTime
  eventModelId: ID
  eventModelType: String
  id: ID!
  image: MediaItem
  physicalEvent: PhysicalEvent
  selfRegistration: Boolean
  startTime: ISO8601DateTime
  tags: [Tag!]!
  tenant: Tenant
  updatedAt: ISO8601DateTime!
  virtualEvent: VirtualEvent
}
input EventInput {
  id: ID
  selfRegistration: Boolean
  eventModelType: String
  eventModelId: ID
  startTime: String
  duration: String
  content: JSON
  tagIds: [ID!]
  removeTags: [ID!]
  imageId: ID
}
type Group {
  assignedCourses: [ContentItem!]!
  courses: [ContentItem!]
  createdAt: ISO8601DateTime!
  enrolledCourses: [ContentItem!]!
  id: ID!
  image: MediaItem
  lessons: [ContentItem!]
  libraryItems: [ContentItem!]
  name: String
  parent: Group
  pathways: [ContentItem!]
  quizs: [ContentItem!]
  sections: [ContentItem!]
  tenant: Tenant!
  updatedAt: ISO8601DateTime!
  users: [User!]!
}
input GroupInput {
  id: ID
  name: String!
  parentId: ID
  userIds: [ID!]
  imageId: ID
  assignedCourseIds: [ID!]
  enrolledCourseIds: [ID!]
}
type GroupMembership {
  createdAt: ISO8601DateTime!
  group: Group
  id: ID!
  isGroupLeader: Boolean
  updatedAt: ISO8601DateTime!
  user: User
}
input GroupUpdateInput {
  id: ID!
  name: String
  parentId: ID
  userIds: [ID!]
  imageId: ID
  assignedCourseIds: [ID!]
  enrolledCourseIds: [ID!]
}
"An ISO 8601-encoded datetime"
scalar ISO8601DateTime
type Icon {
  createdAt: ISO8601DateTime!
  id: ID!
  properties: JSON
  provider: String
  tenantId: Tenant
  updatedAt: ISO8601DateTime!
}
"Represents untyped JSON"
scalar JSON
type MediaItem {
  altText: String
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  fileName: String
  fileSize: Int
  id: ID!
  location: String
  mediaType: String
  properties: JSON
  tenant: Tenant
  title: String
  updatedAt: ISO8601DateTime!
}
input MediaItemUpdateInput {
  id: ID!
  title: String
  altText: String
  properties: JSON
}
type Mutation {
  addUsersToGroups(userIds: [ID!]!, groupIds: [ID!]!): AddUsersToGroupsPayload
  assignCapabilityToRole(capabilityId: ID!, roleId: ID!): AssignCapabilityToRolePayload
  assignCoursesToGroups(input: EnrollGroupContentItemInput!): AssignCoursesToGroupsPayload
  assignRoleToUser(roleId: ID!, userId: ID!): AssignRoleToUserPayload
  assignTenantAdmin(input: TaUserInput!): AssignTaUserPayload
  createCapability(input: CapabilityInput!): CreateCapabilityPayload
  createCertificateTemplate(input: CertificateInput!): CreateCertificateTemplatePayload
  createCourse(input: ContentItemInput!): CreateCoursePayload
  createEvent(input: EventInput!): CreateEventPayload
  createGroup(input: GroupInput!): CreateGroupPayload
  createLesson(input: ContentItemInput!): CreateLessonPayload
  createLibraryItem(input: ContentItemInput!): CreateLibraryItemPayload
  createPathway(input: ContentItemInput!): CreatePathwayPayload
  createPhysicalEvent(input: PhysicalEventInput!): CreatePhysicalEventPayload
  createQuestion(input: QuestionInput!): CreateQuestionPayload
  createQuiz(input: ContentItemInput!): CreateQuizPayload
  createRole(input: RoleInput!): CreateRolePayload
  createSection(input: ContentItemInput!): CreateSectionPayload
  createTag(input: TagInput!): CreateTagPayload
  createTopic(input: TagInput!): CreateTagPayload
  createUserScoAttempt(input: UserScoAttemptInput!): UserScoAttempt
  createVirtualEvent(input: VirtualEventInput!): CreateVirtualEventPayload
  deleteCertificateTemplate(id: ID!): DeleteCertificateTemplatePayload
  deleteCourse(id: ID!): DeleteContentItemPayload
  deleteEvent(id: ID!): DeleteEventPayload
  deleteGroup(id: ID!): DeleteGroupPayload
  deleteLesson(id: ID!): DeleteContentItemPayload
  deleteLibraryItem(id: ID!): DeleteContentItemPayload
  "Deletes the media item and if usage of particular media item is present usage key will be true and object will be not deleted"
  deleteMediaItem(id: ID!): DeleteMediaItemPayload
  deletePathway(id: ID!): DeleteContentItemPayload
  deletePhysicalEvent(id: ID!): DeletePhysicalEventPayload
  deleteQuestion(id: ID!): DeleteQuestionPayload
  deleteQuiz(id: ID!): DeleteContentItemPayload
  deleteScormModule(id: ID!): DeleteScormModulePayload
  deleteSection(id: ID!): DeleteContentItemPayload
  deleteTag(id: ID!): DeleteTagPayload
  deleteTopic(id: ID!): DeleteTagPayload
  deleteUser(id: ID!): DeleteUserPayload
  deleteUserScoAttempt(id: ID!): DeleteUserScoAttemptPayload
  deleteVirtualEvent(id: ID!): DeleteVirtualEventPayload
  enrolGroupsInCourses(input: EnrollGroupContentItemInput!): EnrolGroupsInCoursesPayload
  enrolUsersInCourses(input: EnrollUserContentItemInput!): EnrolUsersInCoursesPayload
  removeEnrolledCourse(input: EnrollContentItemInput!): RemoveEnrolledCoursePayload
  removeRoleFromUser(roleId: ID!, userId: ID!): RemoveRoleFromUserPayload
  removeUserFromGroup(input: UserGroupInput!): RemoveUserFromGroupPayload
  "TO share the content between the Tenants"
  shareContentItem(input: ShareContentItemInput!): ShareContentItemPayload
  updateCertificateTemplate(input: UpdateCertificateInput): UpdateCertificateTemplatePayload
  updateCourse(input: UpdateContentInput!): UpdateCoursePayload
  updateEvent(input: EventInput!): UpdateEventPayload
  updateGroup(input: GroupUpdateInput!): UpdateGroupPayload
  updateLesson(input: UpdateContentInput!): UpdateLessonPayload
  updateLibraryItem(input: UpdateContentInput!): UpdateLibraryItemPayload
  "Update a Media Item present in current Tenant based on the id and other fields to be updated"
  updateMediaItem(input: MediaItemUpdateInput!): UpdateMediaItemPayload
  updatePathway(input: UpdateContentInput!): UpdatePathwayPayload
  updatePhysicalEvent(input: PhysicalEventInput!): UpdatePhysicalEventPayload
  updateQuestion(input: QuestionUpdateInput): UpdateQuestionPayload
  updateQuiz(input: UpdateContentInput!): UpdateQuizPayload
  updateScormModule(input: ScormModuleUpdateInput!): UpdateScormModulePayload
  updateSection(input: UpdateContentInput!): UpdateSectionPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateUserContentStatus(input: UserContentInput!): UserContentStatusUpdatePayload
  updateUserScoAttempt(input: UpdateUserScoAttemptInput!): UserScoAttempt
  updateVirtualEvent(input: VirtualEventInput!): UpdateVirtualEventPayload
}
"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}
type PhysicalEvent {
  createdAt: ISO8601DateTime!
  eventType: String
  events: [Event!]
  id: ID!
  location: String
  tenant: Tenant
  updatedAt: ISO8601DateTime!
}
input PhysicalEventInput {
  id: ID
  location: String
  "Types should be these values only [ :webinar, :one_to_one, :p2p_group ]"
  eventType: String
}
type Query {
  bulkImport(id: ID!): BulkImport!
  bulkImports(where: JSON): [BulkImport!]!
  "Get list of all capabilities"
  capabilities: [Capability!]!
  "Get an capability based on id"
  capability(id: ID!): Capability!
  "Get an courses based on your conditions or based on id"
  course(id: ID!): ContentItem!
  "Get list of all courses"
  courses(where: JSON): [ContentItem!]!
  event(id: ID!): Event!
  events(where: JSON): [Event!]!
  "Get an Group based on id"
  group(id: ID!): Group!
  "Get list of all Groups"
  groups(where: JSON): [Group!]!
  "Get an lessons based on your conditions or based on id"
  lesson(id: ID!): ContentItem!
  "Get list of all lessons"
  lessons(where: JSON): [ContentItem!]!
  "Get an library_items based on your conditions or based on id"
  libraryItem(id: ID!): ContentItem!
  "Get list of all library_items"
  libraryItems(where: JSON): [ContentItem!]!
  "Get a Media Item present in current Tenant based on the id"
  mediaItem("id:  1" id: String): MediaItem!
  "Get List of Media Items present in current Tenant based on the media_types(image/document/video/audio)"
  mediaItems("where: {media_type: ['image', 'audio', 'video', 'document']}" where: JSON, "filter: {file_size: }" filter: JSON): [MediaItem!]!
  "Get an pathways based on your conditions or based on id"
  pathway(id: ID!): ContentItem!
  "Get list of all pathways"
  pathways(where: JSON): [ContentItem!]!
  physicalEvent(id: ID!): PhysicalEvent!
  physicalEvents(where: JSON): [PhysicalEvent!]!
  "Get an quizs based on your conditions or based on id"
  quiz(id: ID!): ContentItem!
  "Get list of all quizzes"
  quizzes(where: JSON): [ContentItem!]!
  "Get an Role based on id"
  role(id: ID!): Role!
  "Get list of all roles"
  roles: [Role!]!
  "Get a SCORM module present in current Tenant based on the id"
  scormModule("id:  1" id: String): ScormModule!
  "Get List of SCORM modules present in current Tenant"
  scormModules("where: {content_type: ['scorm', 'xapi']}" where: JSON): [ScormModule!]!
  "Get an sections based on your conditions or based on id"
  section(id: ID!): ContentItem!
  "Get list of all sections"
  sections(where: JSON): [ContentItem!]!
  "Get an user based on id"
  user(id: ID): User!
  "Get an user sco attempt based on id"
  userScoAttempt("Need to pass User SCO Attempt ID here" id: ID!): UserScoAttempt!
  "Get an user sco attempt based on id"
  userScoAttempts(where: JSON): [UserScoAttempt!]!
  "Get list of all users"
  users(where: JSON): [User!]!
  virtualEvent(id: ID!): VirtualEvent!
  virtualEvents(where: JSON): [VirtualEvent!]!
}
type Question {
  answers: JSON
  content: JSON
  createdAt: ISO8601DateTime!
  icon: Icon
  id: ID!
  order: Int
  questionType: String
  quiz: ContentItem!
  tenant: Tenant!
  updatedAt: ISO8601DateTime!
}
input QuestionInput {
  id: ID
  order: Int
  contentItemId: ID!
  iconId: ID
  questionType: String!
  content: JSON
  answers: JSON
}
input QuestionUpdateInput {
  id: ID!
  order: Int
  contentItemId: ID
  iconId: ID
  questionType: String
  content: JSON
  answers: JSON
}
"Autogenerated return type of RemoveEnrolledCourse"
type RemoveEnrolledCoursePayload {
  groupCourses: [ContentItem!]
  status: String!
  userCourses: [ContentItem!]
}
"Autogenerated return type of RemoveRoleFromUser"
type RemoveRoleFromUserPayload {
  message: String!
}
"Autogenerated return type of RemoveUserFromGroup"
type RemoveUserFromGroupPayload {
  membership: GroupMembership!
  status: String!
}
type Role {
  capabilities: [Capability!]
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  roleType: String!
  tenant: Tenant!
  updatedAt: ISO8601DateTime!
}
input RoleInput {
  name: String!
  " Please mention this field value from the following list only [:tenant_role, :group_role, :content_item_role]"
  roleType: String!
}
type ScormModule {
  contentType: String
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  id: ID!
  launchUrl: String
  manifestData: JSON
  tenant: Tenant
  title: String
  updatedAt: ISO8601DateTime!
}
input ScormModuleUpdateInput {
  id: ID!
  title: String
  contentType: Int
  manifestData: JSON
}
input ShareContentItemInput {
  tenantId: ID!
  contentItemId: ID!
}
"Autogenerated return type of ShareContentItem"
type ShareContentItemPayload {
  message: String!
}
input TaUserInput {
  id: ID!
  userType: String!
}
type Tag {
  courses: [ContentItem!]
  createdAt: ISO8601DateTime!
  id: ID!
  label: String!
  lessons: [ContentItem!]
  libraryItems: [ContentItem!]
  pathways: [ContentItem!]
  quizs: [ContentItem!]
  sections: [ContentItem!]
  tagType: String!
  tenant: Tenant!
  updatedAt: ISO8601DateTime!
}
input TagInput {
  id: ID
  label: String!
  tagType: String!
}
type Tenant {
  courses: [ContentItem!]
  createdAt: ISO8601DateTime!
  groups: [Group!]!
  id: ID!
  lessons: [ContentItem!]
  libraryItems: [ContentItem!]
  name: String!
  pathways: [ContentItem!]
  quizs: [ContentItem!]
  sections: [ContentItem!]
  shortName: String!
  updatedAt: ISO8601DateTime!
  url: String!
  users: [User!]
}
input UpdateCertificateInput {
  id: ID!
  data: JSON!
}
"Autogenerated return type of UpdateCertificateTemplate"
type UpdateCertificateTemplatePayload {
  certificateTemplate: CertificateTemplate!
  message: String!
}
input UpdateContentInput {
  id: ID!
  title: String
  iconId: ID
  imageId: ID
  content: JSON
  contentType: String
  "{ parentIds: ['1','2','3'..] }"
  parentIds: JSON
  "{ childrenIds: ['1','2','3'..] }"
  childrenIds: JSON
  "Example: { settings: {settings1: 'value', ...}}"
  settings: JSON
  prerequisites: JSON
  certificateProperties: JSON
  "{ childrenReorder: [{id: '1', order: 1}, {id: '13', order: 5}, ..] }"
  childrenReorder: JSON
  "{ questionReorder: [{id: '1', order: 1}, {id: '13', order: 5}, ..] }"
  questionReorder: JSON
  "Example: { tagIds: ['1','2','3'..] }"
  tagIds: JSON
  "Example: { removeTags: ['1','2','3'..] }"
  removeTags: JSON
  "scormId: 'ab1-23-3ea4'"
  scormId: ID
}
"Autogenerated return type of UpdateCourse"
type UpdateCoursePayload {
  course: ContentItem
  messages: JSON!
}
"Autogenerated return type of UpdateEvent"
type UpdateEventPayload {
  event: Event!
}
"Autogenerated return type of UpdateGroup"
type UpdateGroupPayload {
  group: Group!
}
"Autogenerated return type of UpdateLesson"
type UpdateLessonPayload {
  lesson: ContentItem
  messages: JSON!
}
"Autogenerated return type of UpdateLibraryItem"
type UpdateLibraryItemPayload {
  libraryItem: ContentItem
  messages: JSON!
}
"Autogenerated return type of UpdateMediaItem"
type UpdateMediaItemPayload {
  mediaItem: MediaItem!
}
"Autogenerated return type of UpdatePathway"
type UpdatePathwayPayload {
  messages: JSON!
  pathway: ContentItem
}
"Autogenerated return type of UpdatePhysicalEvent"
type UpdatePhysicalEventPayload {
  event: PhysicalEvent!
}
"Autogenerated return type of UpdateQuestion"
type UpdateQuestionPayload {
  question: Question!
}
"Autogenerated return type of UpdateQuiz"
type UpdateQuizPayload {
  messages: JSON!
  quiz: ContentItem
}
"Autogenerated return type of UpdateScormModule"
type UpdateScormModulePayload {
  scormModule: ScormModule!
}
"Autogenerated return type of UpdateSection"
type UpdateSectionPayload {
  messages: JSON!
  section: ContentItem
}
input UpdateUserInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  userType: String
  status: String
}
"Autogenerated return type of UpdateUser"
type UpdateUserPayload {
  user: User!
}
input UpdateUserScoAttemptInput {
  id: ID!
  attempt: Int
  data: JSON
}
"Autogenerated return type of UpdateVirtualEvent"
type UpdateVirtualEventPayload {
  event: VirtualEvent!
}
type User {
  courses("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): UserContentConnection
  createdAt: ISO8601DateTime!
  email: String!
  firstName: String
  fullName: String
  groups: [Group!]
  id: ID!
  lastName: String
  lessons("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): UserContentConnection
  libraryItems("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): UserContentConnection
  pathways("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): UserContentConnection
  quizs("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): UserContentConnection
  roles: [Role!]
  sections("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): UserContentConnection
  status: String!
  tenant: Tenant!
  updatedAt: ISO8601DateTime!
  userType: String
}
type UserContent {
  completed: Boolean
  contentItem: ContentItem!
  createdAt: ISO8601DateTime!
  firstVisited: ISO8601DateTime
  id: ID!
  lastVisited: ISO8601DateTime
  score: Int
  status: String
  updatedAt: ISO8601DateTime!
  user: User!
  visits: Int
}
"The connection type for ContentItem."
type UserContentConnection {
  "A list of edges."
  edges: [UserContentEdge]
  "A list of nodes."
  nodes: [ContentItem]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type UserContentEdge {
  completed: Boolean
  createdAt: ISO8601DateTime!
  "A cursor for use in pagination."
  cursor: String!
  firstVisited: ISO8601DateTime
  lastVisited: ISO8601DateTime
  "The item at the end of the edge."
  node: ContentItem
  score: Int
  status: String
  updatedAt: ISO8601DateTime!
  visits: Int
}
input UserContentInput {
  userId: ID
  contentItemId: ID!
  status: String
  lastVisited: ISO8601DateTime
  firstVisited: ISO8601DateTime
  score: Int
  visits: Int
  completed: Boolean
}
"Autogenerated return type of UserContentStatusUpdate"
type UserContentStatusUpdatePayload {
  status: String!
  userContent: UserContent!
}
input UserGroupInput {
  userId: ID!
  groupId: ID!
  isGroupLeader: Boolean
}
type UserScoAttempt {
  attempt: Int
  contentItem: ContentItem
  createdAt: ISO8601DateTime!
  data: JSON
  id: ID!
  updatedAt: ISO8601DateTime!
  user: User
}
input UserScoAttemptInput {
  attempt: Int!
  data: JSON!
  contentItemId: ID!
  scormModuleId: ID!
}
type VirtualEvent {
  createdAt: ISO8601DateTime!
  eventType: String
  events: [Event!]
  id: ID!
  provider: String
  tenant: Tenant
  updatedAt: ISO8601DateTime!
}
input VirtualEventInput {
  id: ID
  provider: String
  eventType: String
}
