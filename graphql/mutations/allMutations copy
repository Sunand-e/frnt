import {
 gql } from '@apollo/client';

export const ADD_USER_TO_GROUP = gql`
  mutation AddUserToGroup(
    $userId: ID,
    $isGroupLeader: Boolean,
    $groupId: ID
  ) {
    addUserToGroup(
      input: {
        params: {
          userId: $userId,
          isGroupLeader: $isGroupLeader,
          groupId: $groupId
        }
      }
    ) {
      membership {
        group {
          id
        }
      }
    }
  }
`

export const ASSIGN_TENANT_ADMIN = gql`
  mutation AssignTenantAdmin(
    $userType: String,
    $id: ID
  ) {
    assignTenantAdmin(
      input: {
        params: {
          userType: $userType,
          id: $id
        }
      }
    ) {
      user {
        id
      }
    }
  }
`

export const CREATE_CERTIFICATE_TEMPLATE = gql`
  mutation CreateCertificateTemplate(
    $data: String
  ) {
    createCertificateTemplate(
      input: {
        params: {
          data: $data
        }
      }
    ) {
      certificateTemplate {
        id
      }
      message
    }
  }
`

export const CREATE_COURSE = gql`
  mutation CreateCourse(
    $title: String!,
    $content: String,
    $certificateProperties: String,
    $certificateTemplateId: ID,
    $childrenIds: [ID],
    $prerequisites: String
  ) {
    createCourse(
      input: {
        params: {
          title: $title,
          content: $content,
          certificateProperties: $certificateProperties,
          certificateTemplateId: $certificateTemplateId,
          childrenIds: $childrenIds,
          prerequisites: $prerequisites
        }
      }
    ) {
      contentItem {
        id
      }
      message
    }
  }
`

export const CREATE_GROUP = gql`
  mutation CreateGroup(
    $name: String!,
    $parentId: ID
  ) {
    createGroup(
      input: {
        params: {
          name: $name,
          parentId: $parentId
        }
      }
    ) {
      group {
        id
        name
        updatedAt
        users {
          id
        }
      }
    }
  }
`

export const CREATE_LESSON = gql`
  mutation CreateLesson(
    $title: String,
    $content: String,
    $parentIds: [ID],
    $prerequisites: String,
    $imageId: ID,
    $iconId: ID
  ) {
    createLesson(
      input: {
        params: {
          title: $title,
          itemType: "lesson",
          content: $content,
          parentIds: $parentIds,
          prerequisites: $prerequisites,
          imageId: $imageId,
          iconId: $iconId
        }
      ) {

      contentItem {

        id
      }
      message
    }
  }
`

export const CREATE_LIBRARY_ITEM = gql`
  mutation CreateLibraryItem(
    $title: String,
    $contentType: String 
    $content: String,
    $childrenIds: [ID],
    $imageId: ID,
    $iconId: ID
  ) {

    createLibraryItem(
      input: {
        params: {
          title: $title,
          itemType: "library",
          contentType: $contentType,
          content: $content,
          childrenIds: $childrenIds,
          imageId: $imageId,
          iconId: $iconId
        }
      }
    ) {
      contentItem {
        id
      }
      message
    }
  }
`

export const CREATE_PATHWAY = gql`
  mutation CreatePathway(
    $title: String,
    $contentType: String,
    $content: String,
    $certificateProperties: String,
    $certificateTemplateId: ID,
    $childrenIds: [ID],
    $imageId: ID,
    $iconId: ID
  ) {
    createPathway(
      input: {
        params: {
          title: $title,
          itemType: "pathway" 
          content: $content,
          certificateProperties: $certificateProperties,
          certificateTemplateId: $certificateTemplateId,
          childrenIds: $childrenIds,
          imageId: $imageId,
          iconId: $iconId
        }
      }
    ) {
      pathway {
        id
      }
    }
  }
`

export const CREATE_QUESTION = gql`
  mutation CreateQuestion(
    $questionType: String,
    $answers: String,
    $content: String,
    $iconId: ID,
  ) {

    createQuestion(
      input: {
        params: {
          questionType: "",
          answers: "",
          content: "",
          iconId: "",
          order: 10
        }
      }
    ) {
      question {
        id
      }
    }
  }
`

export const CREATE_QUIZ = gql`
  mutation CreateQuiz(
    title: String,
    itemType: String,
    certificateProperties: String,
    certificateTemplateId: [ID],
    childrenIds: [ID],
    content: String,
    contentType: String,
    iconId: String,
    id: String,
    imageId: String,
    parentIds: [ID],
    prerequisites: String
  ) {

    createQuiz(
input: {
params: {
title: "",
 itemType: "",
 certificateProperties: "",
 certificateTemplateId: "",
 childrenIds: "",
 content: "",
 contentType: "",
 iconId: "",
 id: "",
 imageId: "",
 order: 10,
 parentIds: "",
 prerequisites: ""}}
) {

      message
      contentItem {

        id
      }
    }
  }
`

export const CREATE_SECTION = gql`
  mutation CreateSection(
) {

    createSection(
input: {
params: {
title: "",
 itemType: "",
 childrenIds: "",
 content: "",
 contentType: "",
 iconId: "",
 imageId: "",
 order: 10,
 parentIds: "",
 prerequisites: ""}}
) {

      message
      contentItem {

        id
      }
    }
  }
`

export const CREATE_TAG = gql`
  mutation CreateTag(
) {

    createTag(
input: {
params: {
label: "",
 tagType: ""}}
) {

      tag {

        id
      }
    }
  }
`

export const CREATE_TOPIC = gql`
  mutation CreateTopic(
) {

    createTopic(
input: {
params: {
label: "",
 tagType: ""}}
) {

      tag {

        id
      }
    }
  }
`

export const CREATE_USER = gql`
  mutation CreateUser(
) {

    createUser(
input: {
params: {
firstName: "",
 lastName: "",
 email: ""}}
)
  }
`

export const DELETE_CERTIFICATE_TEMPLATE = gql`
  mutation DeleteCertificateTemplate(
) {

    deleteCertificateTemplate(
input: {
id: ""}
) {

      message
      certificateTemplate {

        id
      }
    }
  }
`

export const DELETE_COURSE = gql`
  mutation DeleteCourse(
) {

    deleteCourse(
input: {
id: ""}
) {

      contentItem {

        id
      }
    }
  }
`

export const DELETE_LESSON = gql`
  mutation DeleteLesson(
) {

    deleteLesson(
input: {
id: ""}
) {

      contentItem {

        id
      }
    }
  }
`

export const DELETE_LIBRARY_ITEM = gql`
  mutation DeleteLibraryItem(
) {

    deleteLibraryItem(
input: {
id: ""}
) {

      contentItem {

        id
      }
    }
  }
`

export const DELETE_PATHWAY = gql`
  mutation DeletePathway(
) {

    deletePathway(
input: {
id: ""}
) {

      contentItem {

        id
      }
    }
  }
`

export const DELETE_QUESTION = gql`
  mutation DeleteQuestion(
) {

    deleteQuestion(
input: {
params: {
id: ""}}
) {

      message
    }
  }
`

export const DELETE_QUIZ = gql`
  mutation DeleteQuiz(
) {

    deleteQuiz(
input: {
id: ""}
) {

      contentItem {

        id
      }
    }
  }
`

export const DELETE_SECTION = gql`
  mutation DeleteSection(
) {

    deleteSection(
input: {
id: ""}
) {

      clientMutationId
      contentItem {

        id
      }
    }
  }
`

export const DELETE_TAG = gql`
  mutation DeleteTag(
) {

    deleteTag(
input: {
id: ""}
) {

      message
    }
  }
`

export const DELETE_TOPIC = gql`
  mutation DeleteTopic(
) {

    deleteTopic(
input: {
id: ""}
) {

      message
    }
  }
`

export const DELETE_USER = gql`
  mutation DeleteUser(
) {

    deleteUser(
input: {
id: ""}
) {

      clientMutationId
      user {

        id
      }
    }
  }
`

export const ENROLL_COURSE = gql`
  mutation EnrollCourse(
) {

    enrollCourse(
input: {
params: {
contentItemId: "",
 groupId: "",
 userId: ""}}
) {

      status
    }
  }
`

export const REMOVE_ENROLLED_COURSE = gql`
  mutation RemoveEnrolledCourse(
) {

    removeEnrolledCourse(
input: {
params: {
contentItemId: "",
 userId: "",
 groupId: ""}}
) {

      clientMutationId
      status
    }
  }
`

export const REMOVE_USER_FROM_GROUP = gql`
  mutation RemoveUserFromGroup(
) {

    removeUserFromGroup(
input: {
params: {
userId: "",
 groupId: ""}}
) {

      status
      membership {

        id
      }
    }
  }
`

export const UPDATE_CERTIFICATE_TEMPLATE = gql`
  mutation UpdateCertificateTemplate(
) {

    updateCertificateTemplate(
input: {
params: {
data: "",
 id: ""}}
) {

      certificateTemplate {

        id
      }
      message
    }
  }
`

export const UPDATE_COURSE = gql`
  mutation UpdateCourse(
) {

    updateCourse(
input: {
params: {
certificateProperties: "",
 certificateTemplateId: "",
 childrenIds: "",
 questionReorder: "",
 prerequisites: "",
 parentIds: "",
 imageId: "",
 childrenReorder: "",
 content: "",
 iconId: "",
 tagIds: "",
 title: "",
 id: ""}}
) {

      clientMutationId
      messages
    }
  }
`

export const UPDATE_LESSON = gql`
  mutation UpdateLesson(
) {

    updateLesson(
input: {
params: {
id: "",
 parentIds: "",
 content: "",
 iconId: "",
 imageId: "",
 prerequisites: "",
 tagIds: "",
 title: ""}}
) {

      clientMutationId
      messages
    }
  }
`

export const UPDATE_LIBRARY_ITEM = gql`
  mutation UpdateLibraryItem(
) {

    updateLibraryItem(
input: {
params: {
id: "",
 content: "",
 iconId: "",
 imageId: "",
 prerequisites: "",
 tagIds: "",
 title: ""}}
) {

      clientMutationId
      messages
      contentItem {

        id
      }
    }
  }
`

export const UPDATE_PATHWAY = gql`
  mutation UpdatePathway(
) {

    updatePathway(
input: {
params: {
id: "",
 certificateProperties: "",
 certificateTemplateId: "",
 childrenIds: "",
 childrenReorder: "",
 content: "",
 iconId: "",
 imageId: "",
 prerequisites: "",
 tagIds: "",
 title: ""}}
) {

      messages
      contentItem {

        id
      }
    }
  }
`

export const UPDATE_QUESTION = gql`
  mutation UpdateQuestion(
) {

    updateQuestion(
input: {
params: {
answers: "",
 content: "",
 contentItemId: "",
 iconId: "",
 id: "",
 order: 10,
 questionType: ""}}
) {

      clientMutationId
    }
  }
`

export const UPDATE_QUIZ = gql`
  mutation UpdateQuiz(
) {

    updateQuiz(
input: {
params: {
id: "",
 certificateProperties: "",
 certificateTemplateId: "",
 childrenIds: "",
 childrenReorder: "",
 content: "",
 iconId: "",
 imageId: "",
 parentIds: "",
 prerequisites: "",
 questionReorder: "",
 tagIds: "",
 title: ""}}
) {

      clientMutationId
    }
  }
`

export const UPDATE_SECTION = gql`
  mutation UpdateSection(
) {

    updateSection(
input: {
params: {
id: "",
 childrenIds: "",
 childrenReorder: "",
 content: "",
 iconId: "",
 parentIds: "",
 imageId: "",
 prerequisites: "",
 tagIds: "",
 title: ""}}
) {

      clientMutationId
    }
  }
`

export const UPDATE_USER = gql`
  mutation UpdateUser(
) {

    updateUser(
input: {
params: {
firstName: "",
 lastName: "",
 email: "",
 id: "e"}}
) {

      user {

        id
      }
    }
  }
`
