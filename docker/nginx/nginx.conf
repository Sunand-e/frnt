upstream rails-api {
  server 'learning-platform-api.lerning-platform.namespace:3000';
}

server {
  client_max_body_size 1G;
  listen 80;
  server_name learningplatform.smartlms.co.uk;
  # Timeouts #
  # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_send_timeout
  proxy_read_timeout 600s;
  # path for static files
  root /app/public;
  # access_log /app/log/nginx.access.log;
  access_log /dev/stdout;
  # error_log /app/log/nginx.error.log info;
  error_log stderr;

  set $bucket "learning-platform-media-items.s3.eu-west-2.amazonaws.com";
  # sendfile on;

  location / {
    # If the file exists as a static file serve it directly without
    # running all the other rewrite tests on it
    if (-f $request_filename) {
      break;
    }
    # check for index.html for directory index
    # if it's there on the filesystem then rewrite
    # the url to add /index.html to the end of it
    # and then break to send it to the next config rules.
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }
    # this is the meat of the rack page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewrite the url to have explicit .html on the end
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the
    # necessary headers and proxies to our upstream pumas
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }

    # this performs the same as the above, but much more optimized as it is all within the same call
    # try_files /maintenance.html $request_filename $request_filename/index.html $request_filename.html;

  }

  location ~ ^/(graph|upload|rails) {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_pass http://rails-api;
  }

  location = /auth {
    return 302 /auth/;
  }

  location = /healthcheck {
    return 200 "OK";
  }

  location /auth/ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_pass http://rails-api/api/v1/;
  }

  location /api/v1/users/ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_pass http://rails-api;
  }

  location /api/v1/user/ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_pass http://rails-api;
  }

  location /api/v1/tenant/ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_pass http://rails-api;
  }


  # Authentication Based on Subrequest Result:
  # https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/

  location /scorm {
    auth_request        /scormauth;
    auth_request_set $auth_status $upstream_status;
    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header Host $host;
    # proxy_pass http://rails-api;
    # rewrite ^/scorm/(.*) /scorm/$1 break;
    resolver 8.8.8.8;
    proxy_http_version     1.1;
    proxy_redirect off;
    proxy_set_header       Connection "";
    proxy_set_header       Authorization '';
    proxy_set_header       Host $bucket;
    proxy_set_header       X-Real-IP $remote_addr;
    proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_hide_header      x-amz-id-2;
    proxy_hide_header      x-amz-request-id;
    proxy_hide_header      x-amz-meta-server-side-encryption;
    proxy_hide_header      x-amz-server-side-encryption;
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   Set-Cookie;
    proxy_intercept_errors on;
    add_header             Cache-Control max-age=31536000;
    # add_header             Cache-Control max-age=0;
    proxy_pass             https://$bucket; # without trailing slash
    
  }

  location = /scormauth {
    internal;
    proxy_set_header Authorization "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiNzAyOWJkNjUtMjFlYi00ODRiLWE2NGQtNGM2ZWRhODNhZTUzIiwicnNrIjoiZDUifQ.NublIFiZS9_N28hwhVBUcsUa4jXaLWdlq2ajwPrGUbk";
    proxy_pass_header Authorization;
    proxy_pass_request_body off;
    proxy_set_header        Content-Length "";
    proxy_set_header        X-Original-URI $request_uri;
    proxy_pass              http://rails-api/api/v1/user/scorm_authorize;
  }

  # END nginx Authentication Based on Subrequest Result
  
  # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
  # BUT there's a chance it could break the ajax calls.
  # location ~* \.(ico|css|gif|jpe?g|png|js)(\?[0-9]+)?$ {
  #   expires max; # can be good for rails (as *SOME* assets are fingerprinted), maybe not for nextjs.
  # }
  
  # Error pages
  # error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /app/current/public;
  }
}