{"version":3,"file":"sortable.cjs.production.min.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/isValidIndex.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts","../src/utilities/getSortedRects.ts","../src/strategies/rectSwapping.ts","../src/hooks/useSortable.ts","../src/hooks/utilities/useDerivedTransform.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = layoutRects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.offsetLeft +\n            newIndexRect.width -\n            (activeNodeRect.offsetLeft + activeNodeRect.width)\n          : newIndexRect.offsetLeft - activeNodeRect.offsetLeft,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: LayoutRect | undefined = layoutRects[index];\n  const previousRect: LayoutRect | undefined = layoutRects[index - 1];\n  const nextRect: LayoutRect | undefined = layoutRects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width)\n      : nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width)\n    : currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(layoutRects, overIndex, activeIndex);\n\n  const oldRect = layoutRects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = layoutRects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.offsetTop +\n            overIndexRect.height -\n            (activeNodeRect.offsetTop + activeNodeRect.height)\n          : overIndexRect.offsetTop - activeNodeRect.offsetTop,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: LayoutRect | undefined = layoutRects[index];\n  const previousRect: LayoutRect | undefined = layoutRects[index - 1];\n  const nextRect: LayoutRect | undefined = layoutRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n      : nextRect\n      ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n    : previousRect\n    ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n    : 0;\n}\n","import React, {MutableRefObject, useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, LayoutRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {SortingStrategy} from '../types';\nimport {getSortedRects} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: LayoutRect[];\n  strategy: SortingStrategy;\n  wasDragging: MutableRefObject<boolean>;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  wasDragging: {current: false},\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'string' ? item : item.id\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const wasDragging = useRef(false);\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const isSorting = activeIndex !== -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const sortedRects = getSortedRects(items, droppableRects);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isSorting && !willRecomputeLayouts) {\n      // To-do: Add partial recompution of only subset of rects\n      recomputeLayouts();\n    }\n  }, [itemsHaveChanged, isSorting, recomputeLayouts, willRecomputeLayouts]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  useEffect(() => {\n    wasDragging.current = isDragging;\n  }, [isDragging]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects,\n      strategy,\n      wasDragging,\n    }),\n    [\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      sortedRects,\n      useDragOverlay,\n      strategy,\n      wasDragging,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n\nfunction isEqual(arr1: string[], arr2: string[]) {\n  return arr1.join() === arr2.join();\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport type {AnimateLayoutChanges, SortableTransition} from './types';\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {\n  closestCorners,\n  getViewRect,\n  getScrollableAncestors,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {context: {active, droppableContainers, translatedRect, scrollableAncestors}}\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !translatedRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const node = entry?.node.current;\n\n      if (!node) {\n        return;\n      }\n\n      const rect = getViewRect(node);\n      const container: DroppableContainer = {\n        ...entry,\n        rect: {\n          current: rect,\n        },\n      };\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (translatedRect.top + translatedRect.height <= rect.top) {\n            filteredContainers.push(container);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (translatedRect.top >= rect.top + rect.height) {\n            filteredContainers.push(container);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (translatedRect.left >= rect.left + rect.width) {\n            filteredContainers.push(container);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (translatedRect.left + translatedRect.width <= rect.left) {\n            filteredContainers.push(container);\n          }\n          break;\n      }\n    });\n\n    const closestId = closestCorners({\n      active,\n      collisionRect: translatedRect,\n      droppableContainers: filteredContainers,\n    });\n\n    if (closestId) {\n      const newNode = droppableContainers.get(closestId)?.node.current;\n\n      if (newNode) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const newRect = getViewRect(newNode);\n        const offset = hasDifferentScrollAncestors\n          ? {\n              x: 0,\n              y: 0,\n            }\n          : {\n              x: translatedRect.width - newRect.width,\n              y: translatedRect.height - newRect.height,\n            };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y,\n        };\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n","import type {\n  LayoutRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  layoutRects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<LayoutRect[]>((accumulator, id, index) => {\n    const layoutRect = layoutRects.get(id);\n\n    if (layoutRect) {\n      accumulator[index] = layoutRect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {useDraggable, useDroppable, UseDraggableArguments} from '@dnd-kit/core';\nimport {CSS, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {SortingStrategy} from '../types';\nimport {arrayMove, isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {AnimateLayoutChanges, SortableTransition} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments extends UseDraggableArguments {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  id,\n  strategy: localStrategy,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n    wasDragging,\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const {rect, node, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n  });\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    wasDragging.current &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        layoutRects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? arrayMove(items, activeIndex, overIndex).indexOf(id)\n      : index;\n  const prevItems = useRef(items);\n  const itemsHaveChanged = items !== prevItems.current;\n  const prevNewIndex = useRef(newIndex);\n  const previousContainerId = useRef(containerId);\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: prevNewIndex.current,\n    previousItems: prevItems.current,\n    previousContainerId: previousContainerId.current,\n    transition,\n    wasDragging: wasDragging.current,\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && prevNewIndex.current !== newIndex) {\n      prevNewIndex.current = newIndex;\n    }\n\n    if (containerId !== previousContainerId.current) {\n      previousContainerId.current = containerId;\n    }\n\n    if (items !== prevItems.current) {\n      prevItems.current = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n\n  return {\n    active,\n    attributes,\n    activatorEvent,\n    rect,\n    index,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && prevNewIndex.current === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (shouldDisplaceDragSource || !transition) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n","import {useEffect, useRef, useState} from 'react';\nimport {getBoundingClientRect, LayoutRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<LayoutRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getBoundingClientRect(node.current);\n\n        const delta = {\n          x: initial.offsetLeft - current.offsetLeft,\n          y: initial.offsetTop - current.offsetTop,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","isValidIndex","index","defaultScale","scaleX","scaleY","rectSortingStrategy","layoutRects","activeIndex","overIndex","newRects","oldRect","newRect","x","offsetLeft","y","offsetTop","width","height","Context","React","createContext","containerId","disableTransforms","items","useDragOverlay","sortedRects","strategy","wasDragging","current","defaultAnimateLayoutChanges","isSorting","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","directions","KeyboardCode","Down","Right","Up","Left","children","id","userDefinedItems","active","dragOverlay","droppableRects","over","recomputeLayouts","willRecomputeLayouts","useDndContext","useUniqueId","Boolean","rect","useMemo","map","item","isDragging","useRef","indexOf","previousItemsRef","reduce","accumulator","layoutRect","get","Array","getSortedRects","itemsHaveChanged","arr2","join","useIsomorphicLayoutEffect","useEffect","contextValue","Provider","value","activeNodeRect","fallbackActiveRect","itemGap","currentRect","previousRect","nextRect","getItemGap","newIndexRect","event","context","droppableContainers","translatedRect","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","entry","disabled","node","getViewRect","container","top","push","left","closestId","closestCorners","collisionRect","newNode","_droppableContainers$","hasDifferentScrollAncestors","getScrollableAncestors","some","element","offset","animateLayoutChanges","attributes","userDefinedAttributes","data","customData","localStrategy","globalStrategy","useContext","sortable","setNodeRef","setDroppableNodeRef","useDroppable","activatorEvent","setDraggableNodeRef","listeners","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","prevItems","prevNewIndex","shouldAnimateLayoutChanges","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getBoundingClientRect","delta","requestAnimationFrame","useDerivedTransform","overIndexRect"],"mappings":"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"}