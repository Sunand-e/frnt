{"code":"// To-do: We should be calculating scale transformation\r\nconst defaultScale = {\r\n    scaleX: 1,\r\n    scaleY: 1,\r\n};\r\nexport const horizontalListSortingStrategy = ({ layoutRects, activeNodeRect: fallbackActiveRect, activeIndex, overIndex, index, }) => {\r\n    const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\r\n    if (!activeNodeRect) {\r\n        return null;\r\n    }\r\n    const itemGap = getItemGap(layoutRects, index, activeIndex);\r\n    if (index === activeIndex) {\r\n        const newIndexRect = layoutRects[overIndex];\r\n        if (!newIndexRect) {\r\n            return null;\r\n        }\r\n        return {\r\n            x: activeIndex < overIndex\r\n                ? newIndexRect.offsetLeft +\r\n                    newIndexRect.width -\r\n                    (activeNodeRect.offsetLeft + activeNodeRect.width)\r\n                : newIndexRect.offsetLeft - activeNodeRect.offsetLeft,\r\n            y: 0,\r\n            ...defaultScale,\r\n        };\r\n    }\r\n    if (index > activeIndex && index <= overIndex) {\r\n        return {\r\n            x: -activeNodeRect.width - itemGap,\r\n            y: 0,\r\n            ...defaultScale,\r\n        };\r\n    }\r\n    if (index < activeIndex && index >= overIndex) {\r\n        return {\r\n            x: activeNodeRect.width + itemGap,\r\n            y: 0,\r\n            ...defaultScale,\r\n        };\r\n    }\r\n    return {\r\n        x: 0,\r\n        y: 0,\r\n        ...defaultScale,\r\n    };\r\n};\r\nfunction getItemGap(layoutRects, index, activeIndex) {\r\n    const currentRect = layoutRects[index];\r\n    const previousRect = layoutRects[index - 1];\r\n    const nextRect = layoutRects[index + 1];\r\n    if (!currentRect || (!previousRect && !nextRect)) {\r\n        return 0;\r\n    }\r\n    if (activeIndex < index) {\r\n        return previousRect\r\n            ? currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width)\r\n            : nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width);\r\n    }\r\n    return nextRect\r\n        ? nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width)\r\n        : currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width);\r\n}\r\n//# sourceMappingURL=horizontalListSorting.js.map","references":["D:/Developer/Work/tutorials/dnd-kit/packages/core/dist/index.d.ts","D:/Developer/Work/tutorials/dnd-kit/packages/sortable/src/types/index.ts"],"map":"{\"version\":3,\"file\":\"horizontalListSorting.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/strategies/horizontalListSorting.ts\"],\"names\":[],\"mappings\":\"AAGA,uDAAuD;AACvD,MAAM,YAAY,GAAG;IACnB,MAAM,EAAE,CAAC;IACT,MAAM,EAAE,CAAC;CACV,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAAoB,CAAC,EAC7D,WAAW,EACX,cAAc,EAAE,kBAAkB,EAClC,WAAW,EACX,SAAS,EACT,KAAK,GACN,EAAE,EAAE;IACH,MAAM,cAAc,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,kBAAkB,CAAC;IAEtE,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;IAE5D,IAAI,KAAK,KAAK,WAAW,EAAE;QACzB,MAAM,YAAY,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;QAE5C,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QAED,OAAO;YACL,CAAC,EACC,WAAW,GAAG,SAAS;gBACrB,CAAC,CAAC,YAAY,CAAC,UAAU;oBACvB,YAAY,CAAC,KAAK;oBAClB,CAAC,cAAc,CAAC,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC;gBACpD,CAAC,CAAC,YAAY,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU;YACzD,CAAC,EAAE,CAAC;YACJ,GAAG,YAAY;SAChB,CAAC;KACH;IAED,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,IAAI,SAAS,EAAE;QAC7C,OAAO;YACL,CAAC,EAAE,CAAC,cAAc,CAAC,KAAK,GAAG,OAAO;YAClC,CAAC,EAAE,CAAC;YACJ,GAAG,YAAY;SAChB,CAAC;KACH;IAED,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,IAAI,SAAS,EAAE;QAC7C,OAAO;YACL,CAAC,EAAE,cAAc,CAAC,KAAK,GAAG,OAAO;YACjC,CAAC,EAAE,CAAC;YACJ,GAAG,YAAY;SAChB,CAAC;KACH;IAED,OAAO;QACL,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,GAAG,YAAY;KAChB,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,UAAU,CACjB,WAAyB,EACzB,KAAa,EACb,WAAmB;IAEnB,MAAM,WAAW,GAA2B,WAAW,CAAC,KAAK,CAAC,CAAC;IAC/D,MAAM,YAAY,GAA2B,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IACpE,MAAM,QAAQ,GAA2B,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAEhE,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,QAAQ,CAAC,EAAE;QAChD,OAAO,CAAC,CAAC;KACV;IAED,IAAI,WAAW,GAAG,KAAK,EAAE;QACvB,OAAO,YAAY;YACjB,CAAC,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC;YACzE,CAAC,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;KACxE;IAED,OAAO,QAAQ;QACb,CAAC,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC;QACpE,CAAC,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AAC9E,CAAC\"}","dts":{"name":"D:/Developer/Work/tutorials/dnd-kit/packages/sortable/strategies/horizontalListSorting.d.ts","writeByteOrderMark":false,"text":"import type { SortingStrategy } from '../types';\r\nexport declare const horizontalListSortingStrategy: SortingStrategy;\r\n"}}
