{"code":"import { useContext, useEffect, useMemo, useRef } from 'react';\r\nimport { useDraggable, useDroppable } from '@dnd-kit/core';\r\nimport { CSS, useCombinedRefs } from '@dnd-kit/utilities';\r\nimport { Context } from '../components';\r\nimport { arrayMove, isValidIndex } from '../utilities';\r\nimport { defaultAnimateLayoutChanges, defaultAttributes, defaultTransition, disabledTransition, transitionProperty, } from './defaults';\r\nimport { useDerivedTransform } from './utilities';\r\nexport function useSortable({ animateLayoutChanges = defaultAnimateLayoutChanges, attributes: userDefinedAttributes, disabled, data: customData, id, strategy: localStrategy, transition = defaultTransition, }) {\r\n    const { items, containerId, activeIndex, disableTransforms, sortedRects, overIndex, useDragOverlay, strategy: globalStrategy, wasDragging, } = useContext(Context);\r\n    const index = items.indexOf(id);\r\n    const data = useMemo(() => ({ sortable: { containerId, index, items }, ...customData }), [containerId, customData, index, items]);\r\n    const { rect, node, setNodeRef: setDroppableNodeRef } = useDroppable({\r\n        id,\r\n        data,\r\n    });\r\n    const { active, activeNodeRect, activatorEvent, attributes, setNodeRef: setDraggableNodeRef, listeners, isDragging, over, transform, } = useDraggable({\r\n        id,\r\n        data,\r\n        attributes: {\r\n            ...defaultAttributes,\r\n            ...userDefinedAttributes,\r\n        },\r\n        disabled,\r\n    });\r\n    const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\r\n    const isSorting = Boolean(active);\r\n    const displaceItem = isSorting &&\r\n        wasDragging.current &&\r\n        !disableTransforms &&\r\n        isValidIndex(activeIndex) &&\r\n        isValidIndex(overIndex);\r\n    const shouldDisplaceDragSource = !useDragOverlay && isDragging;\r\n    const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;\r\n    const strategy = localStrategy ?? globalStrategy;\r\n    const finalTransform = displaceItem\r\n        ? dragSourceDisplacement ??\r\n            strategy({\r\n                layoutRects: sortedRects,\r\n                activeNodeRect,\r\n                activeIndex,\r\n                overIndex,\r\n                index,\r\n            })\r\n        : null;\r\n    const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex)\r\n        ? arrayMove(items, activeIndex, overIndex).indexOf(id)\r\n        : index;\r\n    const prevItems = useRef(items);\r\n    const itemsHaveChanged = items !== prevItems.current;\r\n    const prevNewIndex = useRef(newIndex);\r\n    const previousContainerId = useRef(containerId);\r\n    const shouldAnimateLayoutChanges = animateLayoutChanges({\r\n        active,\r\n        containerId,\r\n        isDragging,\r\n        isSorting,\r\n        id,\r\n        index,\r\n        items,\r\n        newIndex: prevNewIndex.current,\r\n        previousItems: prevItems.current,\r\n        previousContainerId: previousContainerId.current,\r\n        transition,\r\n        wasDragging: wasDragging.current,\r\n    });\r\n    const derivedTransform = useDerivedTransform({\r\n        disabled: !shouldAnimateLayoutChanges,\r\n        index,\r\n        node,\r\n        rect,\r\n    });\r\n    useEffect(() => {\r\n        if (isSorting && prevNewIndex.current !== newIndex) {\r\n            prevNewIndex.current = newIndex;\r\n        }\r\n        if (containerId !== previousContainerId.current) {\r\n            previousContainerId.current = containerId;\r\n        }\r\n        if (items !== prevItems.current) {\r\n            prevItems.current = items;\r\n        }\r\n    }, [isSorting, newIndex, containerId, items]);\r\n    return {\r\n        active,\r\n        attributes,\r\n        activatorEvent,\r\n        rect,\r\n        index,\r\n        isSorting,\r\n        isDragging,\r\n        listeners,\r\n        node,\r\n        overIndex,\r\n        over,\r\n        setNodeRef,\r\n        setDroppableNodeRef,\r\n        setDraggableNodeRef,\r\n        transform: derivedTransform ?? finalTransform,\r\n        transition: getTransition(),\r\n    };\r\n    function getTransition() {\r\n        if (\r\n        // Temporarily disable transitions for a single frame to set up derived transforms\r\n        derivedTransform ||\r\n            // Or to prevent items jumping to back to their \"new\" position when items change\r\n            (itemsHaveChanged && prevNewIndex.current === index)) {\r\n            return disabledTransition;\r\n        }\r\n        if (shouldDisplaceDragSource || !transition) {\r\n            return undefined;\r\n        }\r\n        if (isSorting || shouldAnimateLayoutChanges) {\r\n            return CSS.Transition.toString({\r\n                ...transition,\r\n                property: transitionProperty,\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n//# sourceMappingURL=useSortable.js.map","references":["D:/Developer/Work/tutorials/dnd-kit/node_modules/@types/react/index.d.ts","D:/Developer/Work/tutorials/dnd-kit/packages/core/dist/index.d.ts","D:/Developer/Work/tutorials/dnd-kit/packages/utilities/dist/index.d.ts","D:/Developer/Work/tutorials/dnd-kit/packages/sortable/src/components/index.ts","D:/Developer/Work/tutorials/dnd-kit/packages/sortable/src/types/index.ts","D:/Developer/Work/tutorials/dnd-kit/packages/sortable/src/utilities/index.ts","D:/Developer/Work/tutorials/dnd-kit/packages/sortable/src/hooks/defaults.ts","D:/Developer/Work/tutorials/dnd-kit/packages/sortable/src/hooks/types.ts","D:/Developer/Work/tutorials/dnd-kit/packages/sortable/src/hooks/utilities/index.ts"],"map":"{\"version\":3,\"file\":\"useSortable.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useSortable.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"D:/Developer/Work/tutorials/dnd-kit/packages/sortable/hooks/useSortable.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { UseDraggableArguments } from '@dnd-kit/core';\r\nimport type { SortingStrategy } from '../types';\r\nimport type { AnimateLayoutChanges, SortableTransition } from './types';\r\nexport interface Arguments extends UseDraggableArguments {\r\n    animateLayoutChanges?: AnimateLayoutChanges;\r\n    strategy?: SortingStrategy;\r\n    transition?: SortableTransition | null;\r\n}\r\nexport declare function useSortable({ animateLayoutChanges, attributes: userDefinedAttributes, disabled, data: customData, id, strategy: localStrategy, transition, }: Arguments): {\r\n    active: import(\"@dnd-kit/core\").Active | null;\r\n    attributes: {\r\n        role: string;\r\n        tabIndex: number;\r\n        'aria-pressed': boolean | undefined;\r\n        'aria-roledescription': string;\r\n        'aria-describedby': string;\r\n    };\r\n    activatorEvent: Event | null;\r\n    rect: import(\"react\").MutableRefObject<import(\"@dnd-kit/core\").LayoutRect | null>;\r\n    index: number;\r\n    isSorting: boolean;\r\n    isDragging: boolean;\r\n    listeners: import(\"@dnd-kit/core\").DraggableSyntheticListeners;\r\n    node: import(\"react\").MutableRefObject<HTMLElement | null>;\r\n    overIndex: number;\r\n    over: import(\"@dnd-kit/core\").Over | null;\r\n    setNodeRef: (node: HTMLElement | null) => void;\r\n    setDroppableNodeRef: (element: HTMLElement | null) => void;\r\n    setDraggableNodeRef: (element: HTMLElement | null) => void;\r\n    transform: import(\"@dnd-kit/utilities\").Transform | null;\r\n    transition: string | undefined;\r\n};\r\n"}}
